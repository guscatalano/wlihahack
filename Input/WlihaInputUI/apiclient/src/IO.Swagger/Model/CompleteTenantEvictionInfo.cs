/* 
 * My API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CompleteTenantEvictionInfo
    /// </summary>
    [DataContract]
        public partial class CompleteTenantEvictionInfo :  IEquatable<CompleteTenantEvictionInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompleteTenantEvictionInfo" /> class.
        /// </summary>
        /// <param name="tenantInfo">tenantInfo.</param>
        /// <param name="addressInfo">addressInfo.</param>
        /// <param name="evictionInfo">evictionInfo.</param>
        public CompleteTenantEvictionInfo(TenantInfo tenantInfo = default(TenantInfo), AddressInfo addressInfo = default(AddressInfo), EvictionInfo evictionInfo = default(EvictionInfo))
        {
            this.TenantInfo = tenantInfo;
            this.AddressInfo = addressInfo;
            this.EvictionInfo = evictionInfo;
        }
        
        /// <summary>
        /// Gets or Sets TenantInfo
        /// </summary>
        [DataMember(Name="tenantInfo", EmitDefaultValue=false)]
        public TenantInfo TenantInfo { get; set; }

        /// <summary>
        /// Gets or Sets AddressInfo
        /// </summary>
        [DataMember(Name="addressInfo", EmitDefaultValue=false)]
        public AddressInfo AddressInfo { get; set; }

        /// <summary>
        /// Gets or Sets EvictionInfo
        /// </summary>
        [DataMember(Name="evictionInfo", EmitDefaultValue=false)]
        public EvictionInfo EvictionInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompleteTenantEvictionInfo {\n");
            sb.Append("  TenantInfo: ").Append(TenantInfo).Append("\n");
            sb.Append("  AddressInfo: ").Append(AddressInfo).Append("\n");
            sb.Append("  EvictionInfo: ").Append(EvictionInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompleteTenantEvictionInfo);
        }

        /// <summary>
        /// Returns true if CompleteTenantEvictionInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CompleteTenantEvictionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompleteTenantEvictionInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TenantInfo == input.TenantInfo ||
                    (this.TenantInfo != null &&
                    this.TenantInfo.Equals(input.TenantInfo))
                ) && 
                (
                    this.AddressInfo == input.AddressInfo ||
                    (this.AddressInfo != null &&
                    this.AddressInfo.Equals(input.AddressInfo))
                ) && 
                (
                    this.EvictionInfo == input.EvictionInfo ||
                    (this.EvictionInfo != null &&
                    this.EvictionInfo.Equals(input.EvictionInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TenantInfo != null)
                    hashCode = hashCode * 59 + this.TenantInfo.GetHashCode();
                if (this.AddressInfo != null)
                    hashCode = hashCode * 59 + this.AddressInfo.GetHashCode();
                if (this.EvictionInfo != null)
                    hashCode = hashCode * 59 + this.EvictionInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
